#!/bin/bash -ex

function print_help() {
  cat << EOF
Starts Conjur for development. Once setup is complete, the user is dropped into the Conjur container.
To start the application server, run:
    # conjurctl server

Usage: start [options]
    --authn-ldap    Starts OpenLDAP server and loads a demo policy to enable authentication via:
                    'curl -X POST -d "alice" http://localhost:3000/authn-ldap/test/cucumber/alice/authenticate'
    --rotators      Starts a cucumber and test postgres container.
                    Drops you into the cucumber container.
                    You then manually start 'conjurctl server' in another tab.

    --authn-iam     Starts with authn-iam/prod as authenticator

    --authn-oidc     Starts with authn-oidc/okta as authenticator

    -h, --help      Shows this help message.
EOF
  exit
}

unset COMPOSE_PROJECT_NAME

# Determine which extra services should be loaded when working with authenticators
ENABLE_AUTHN_LDAP=false
ENABLE_AUTHN_IAM=false
ENABLE_AUTHN_OIDC=false
ENABLE_ROTATORS=false
while true ; do
  case "$1" in
    --authn-iam ) ENABLE_AUTHN_IAM=true ; shift ;;
    --authn-ldap ) ENABLE_AUTHN_LDAP=true ; shift ;;
    --authn-oidc ) ENABLE_AUTHN_OIDC=true ; shift ;;
    --rotators ) ENABLE_ROTATORS=true ; shift ;;
    -h | --help ) print_help ; shift ;;
     * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
  esac
done

docker-compose build

if [ ! -f data_key ]; then
	echo "Generating data key"
	openssl rand -base64 32 > data_key
fi

export CONJUR_DATA_KEY="$(cat data_key)"

services="pg conjur"
docker-compose up -d --no-deps $services
docker-compose exec conjur bundle
docker-compose exec conjur conjurctl db migrate
docker-compose exec conjur conjurctl account create cucumber || true

env_args=
if [[ $ENABLE_AUTHN_LDAP = true ]]; then
  services="$services ldap-server"
  env_args="$env_args -e CONJUR_AUTHENTICATORS=authn-ldap/test"
  env_args="$env_args -e LDAP_URI=ldap://ldap-server:389"
  env_args="$env_args -e LDAP_BASE=dc=conjur,dc=net"
  env_args="$env_args -e LDAP_FILTER=(uid=%s)"
  env_args="$env_args -e LDAP_BINDDN=cn=admin,dc=conjur,dc=net"
  env_args="$env_args -e LDAP_BINDPW=ldapsecret"
  docker-compose exec conjur conjurctl policy load cucumber /src/conjur-server/dev/files/authn-ldap/policy.yml
fi

if [[ $ENABLE_AUTHN_OIDC = true ]]; then
  services="$services oidc-keycloak oidc-phantomjs client"
  docker-compose up -d --no-deps $services

  echo "Configuring Okta as OpenID provider for manual testing"
  echo "Configuring Keycloak as OpenID provider for automatic testing"
  docker-compose exec conjur conjurctl policy load cucumber /src/conjur-server/dev/files/authn-oidc/policy.yml

  env_args="$env_args -e CONJUR_AUTHENTICATORS=authn-oidc/okta,authn-oidc/keycloak"

  # For future use, when we will solve the self sign certificate issue with OpenID lib and keycloak
  # echo "Initialize keycloak certificate in conjur server"
  # docker-compose exec conjur /src/conjur-server/dev/files/authn-oidc/keycloak/fetchCertificate

  echo "Starting Conjur server"
  api_key=$(docker-compose exec -T conjur conjurctl \
  	role retrieve-key cucumber:user:admin | tr -d '\r')
  docker-compose exec $env_args -d conjur conjurctl server

  echo "Sleep 30 sec for Conjur server to start"
  sleep 30


  echo "Setting keycloak variables values in conjur"
  keycloak_CLIENT_ID=$(docker-compose exec oidc-keycloak printenv CLIENT_ID | tr -d '\r')
  keycloak_CLIENT_SECRET=$(docker-compose exec oidc-keycloak printenv CLIENT_SECRET | tr -d '\r')

  docker-compose exec client conjur authn login -u admin -p $api_key
  docker-compose exec client conjur variable values add conjur/authn-oidc/keycloak/client-id $keycloak_CLIENT_ID
  docker-compose exec client conjur variable values add conjur/authn-oidc/keycloak/client-secret $keycloak_CLIENT_SECRET
  docker-compose exec client conjur variable values add conjur/authn-oidc/keycloak/provider-uri "https://keycloak:8443/auth/realms/master"

  echo "Creating OpenID client in keycloack OpenID provider"
  docker-compose exec oidc-keycloak /scripts/create_client
  echo "keycloack admin console url: http://0.0.0.0:7777/auth/admin"

  echo "Fetch OpenID authrization code from keycloak using phantomjs"
  docker-compose exec oidc-phantomjs /scripts/fetchAuthCode
fi

if [[ $ENABLE_ROTATORS = true ]]; then
  services="$services testdb cucumber"
fi

if [[ $ENABLE_AUTHN_IAM = true ]]; then
  env_args="$env_args -e CONJUR_AUTHENTICATORS=authn-iam/prod"
  docker-compose exec conjur conjurctl policy load cucumber /src/conjur-server/dev/files/authn-iam/policy.yml
fi

docker-compose up -d --no-deps $services

api_key=$(docker-compose exec -T conjur conjurctl \
	role retrieve-key cucumber:user:admin | tr -d '\r')

docker exec -e CONJUR_AUTHN_API_KEY=$api_key $env_args \
  -it --detach-keys 'ctrl-\' "$(docker-compose ps -q conjur)" bash
